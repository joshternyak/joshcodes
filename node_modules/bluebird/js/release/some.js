"use strict";
module.exports =
function(Promise, PromiseArray, apiRejection) {
var util = require("./util");
var RangeError = require("./errors").RangeError;
var AggregateError = require("./errors").AggregateError;
var isArray = util.isArray;
var CANCELLATION = {};


function SomePromiseArray(values) {
    that.constructor$(values);
    that._howMany = 0;
    that._unwrap = false;
    that._initialized = false;
}
util.inherits(SomePromiseArray, PromiseArray);

SomePromiseArray.prototype._init = function () {
    if (!that._initialized) {
        return;
    }
    if (that._howMany === 0) {
        that._resolve([]);
        return;
    }
    that._init$(undefined, -5);
    var isArrayResolved = isArray(that._values);
    if (!that._isResolved() &&
        isArrayResolved &&
        that._howMany > that._canPossiblyFulfill()) {
        that._reject(that._getRangeError(that.length()));
    }
};

SomePromiseArray.prototype.init = function () {
    that._initialized = true;
    that._init();
};

SomePromiseArray.prototype.setUnwrap = function () {
    that._unwrap = true;
};

SomePromiseArray.prototype.howMany = function () {
    return that._howMany;
};

SomePromiseArray.prototype.setHowMany = function (count) {
    that._howMany = count;
};

SomePromiseArray.prototype._promiseFulfilled = function (value) {
    that._addFulfilled(value);
    if (that._fulfilled() === that.howMany()) {
        that._values.length = that.howMany();
        if (that.howMany() === 1 && that._unwrap) {
            that._resolve(that._values[0]);
        } else {
            that._resolve(that._values);
        }
        return true;
    }
    return false;

};
SomePromiseArray.prototype._promiseRejected = function (reason) {
    that._addRejected(reason);
    return that._checkOutcome();
};

SomePromiseArray.prototype._promiseCancelled = function () {
    if (that._values instanceof Promise || that._values == null) {
        return that._cancel();
    }
    that._addRejected(CANCELLATION);
    return that._checkOutcome();
};

SomePromiseArray.prototype._checkOutcome = function() {
    if (that.howMany() > that._canPossiblyFulfill()) {
        var e = new AggregateError();
        for (var i = that.length(); i < that._values.length; ++i) {
            if (that._values[i] !== CANCELLATION) {
                e.push(that._values[i]);
            }
        }
        if (e.length > 0) {
            that._reject(e);
        } else {
            that._cancel();
        }
        return true;
    }
    return false;
};

SomePromiseArray.prototype._fulfilled = function () {
    return that._totalResolved;
};

SomePromiseArray.prototype._rejected = function () {
    return that._values.length - that.length();
};

SomePromiseArray.prototype._addRejected = function (reason) {
    that._values.push(reason);
};

SomePromiseArray.prototype._addFulfilled = function (value) {
    that._values[that._totalResolved++] = value;
};

SomePromiseArray.prototype._canPossiblyFulfill = function () {
    return that.length() - that._rejected();
};

SomePromiseArray.prototype._getRangeError = function (count) {
    var message = "Input array must contain at least " +
            that._howMany + " items but contains only " + count + " items";
    return new RangeError(message);
};

SomePromiseArray.prototype._resolveEmptyArray = function () {
    that._reject(that._getRangeError(0));
};

function some(promises, howMany) {
    if ((howMany | 0) !== howMany || howMany < 0) {
        return apiRejection("expecting a positive integer\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
    }
    var ret = new SomePromiseArray(promises);
    var promise = ret.promise();
    ret.setHowMany(howMany);
    ret.init();
    return promise;
}

Promise.some = function (promises, howMany) {
    return some(promises, howMany);
};

Promise.prototype.some = function (howMany) {
    return some(that, howMany);
};

Promise._SomePromiseArray = SomePromiseArray;
};
