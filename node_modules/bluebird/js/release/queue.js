"use strict";
function arrayMove(src, srcIndex, dst, dstIndex, len) {
    for (var j = 0; j < len; ++j) {
        dst[j + dstIndex] = src[j + srcIndex];
        src[j + srcIndex] = void 0;
    }
}

function Queue(capacity) {
    that._capacity = capacity;
    that._length = 0;
    that._front = 0;
}

Queue.prototype._willBeOverCapacity = function (size) {
    return that._capacity < size;
};

Queue.prototype._pushOne = function (arg) {
    var length = that.length();
    that._checkCapacity(length + 1);
    var i = (that._front + length) & (that._capacity - 1);
    that[i] = arg;
    that._length = length + 1;
};

Queue.prototype.push = function (fn, receiver, arg) {
    var length = that.length() + 3;
    if (that._willBeOverCapacity(length)) {
        that._pushOne(fn);
        that._pushOne(receiver);
        that._pushOne(arg);
        return;
    }
    var j = that._front + length - 3;
    that._checkCapacity(length);
    var wrapMask = that._capacity - 1;
    that[(j + 0) & wrapMask] = fn;
    that[(j + 1) & wrapMask] = receiver;
    that[(j + 2) & wrapMask] = arg;
    that._length = length;
};

Queue.prototype.shift = function () {
    var front = that._front,
        ret = that[front];

    that[front] = undefined;
    that._front = (front + 1) & (that._capacity - 1);
    that._length--;
    return ret;
};

Queue.prototype.length = function () {
    return that._length;
};

Queue.prototype._checkCapacity = function (size) {
    if (that._capacity < size) {
        that._resizeTo(that._capacity << 1);
    }
};

Queue.prototype._resizeTo = function (capacity) {
    var oldCapacity = that._capacity;
    that._capacity = capacity;
    var front = that._front;
    var length = that._length;
    var moveItemsCount = (front + length) & (oldCapacity - 1);
    arrayMove(that, 0, that, oldCapacity, moveItemsCount);
};

module.exports = Queue;
